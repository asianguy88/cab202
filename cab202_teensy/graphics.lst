   1               		.file	"graphics.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.show_screen,"ax",@progbits
  11               	.global	show_screen
  13               	show_screen:
  14               	.LFB1:
  15               		.file 1 "graphics.c"
   1:graphics.c    **** /*
   2:graphics.c    **** *	CAB202 Teensy Library: 'cab202_teensy'
   3:graphics.c    **** *	graphics.c
   4:graphics.c    **** *
   5:graphics.c    **** *	B.Talbot, September 2015
   6:graphics.c    **** *	Queensland University of Technology
   7:graphics.c    **** */
   8:graphics.c    **** #include <avr/pgmspace.h>
   9:graphics.c    **** #include "graphics.h"
  10:graphics.c    **** #include "macros.h"
  11:graphics.c    **** 
  12:graphics.c    **** unsigned char screen_buffer[LCD_BUFFER_SIZE];
  13:graphics.c    **** 
  14:graphics.c    **** /*
  15:graphics.c    ****  * Function implementations
  16:graphics.c    ****  */
  17:graphics.c    **** void show_screen(void) {
  16               		.loc 1 17 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  18:graphics.c    **** 	// Reset our position in the LCD RAM
  19:graphics.c    **** 	lcd_position(0,0);
  30               		.loc 1 19 0
  31 0004 60E0      		ldi r22,0
  32 0006 80E0      		ldi r24,0
  33 0008 0E94 0000 		call lcd_position
  34               	.LVL0:
  35 000c C0E0      		ldi r28,lo8(screen_buffer)
  36 000e D0E0      		ldi r29,hi8(screen_buffer)
  37               	.LVL1:
  38               	.L2:
  20:graphics.c    **** 
  21:graphics.c    **** 	// Iterate through our buffer and write each byte to the LCD.
  22:graphics.c    **** 	unsigned int i;
  23:graphics.c    **** 	for(i = 0; i < LCD_BUFFER_SIZE; i++){
  24:graphics.c    **** 		lcd_write(LCD_D, screen_buffer[i]);
  39               		.loc 1 24 0 discriminator 3
  40 0010 6991      		ld r22,Y+
  41               	.LVL2:
  42 0012 81E0      		ldi r24,lo8(1)
  43 0014 0E94 0000 		call lcd_write
  44               	.LVL3:
  23:graphics.c    **** 		lcd_write(LCD_D, screen_buffer[i]);
  45               		.loc 1 23 0 discriminator 3
  46 0018 80E0      		ldi r24,hi8(screen_buffer+504)
  47 001a C030      		cpi r28,lo8(screen_buffer+504)
  48 001c D807      		cpc r29,r24
  49 001e 01F4      		brne .L2
  50               	/* epilogue start */
  25:graphics.c    **** 	}
  26:graphics.c    **** }
  51               		.loc 1 26 0
  52 0020 DF91      		pop r29
  53 0022 CF91      		pop r28
  54               	.LVL4:
  55 0024 0895      		ret
  56               		.cfi_endproc
  57               	.LFE1:
  59               		.section	.text.clear_screen,"ax",@progbits
  60               	.global	clear_screen
  62               	clear_screen:
  63               	.LFB2:
  27:graphics.c    **** 
  28:graphics.c    **** void clear_screen(void) {
  64               		.loc 1 28 0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  70               	.LVL5:
  71 0000 E0E0      		ldi r30,lo8(screen_buffer)
  72 0002 F0E0      		ldi r31,hi8(screen_buffer)
  73               	.LVL6:
  74               	.L5:
  29:graphics.c    **** 	// Set every byte in the buffer to 0b00000000
  30:graphics.c    **** 	unsigned int i;
  31:graphics.c    **** 	for(i = 0; i < LCD_BUFFER_SIZE; i++){
  32:graphics.c    **** 		 screen_buffer[i] = 0;
  75               		.loc 1 32 0 discriminator 3
  76 0004 1192      		st Z+,__zero_reg__
  77               	.LVL7:
  31:graphics.c    **** 		 screen_buffer[i] = 0;
  78               		.loc 1 31 0 discriminator 3
  79 0006 80E0      		ldi r24,hi8(screen_buffer+504)
  80 0008 E030      		cpi r30,lo8(screen_buffer+504)
  81 000a F807      		cpc r31,r24
  82 000c 01F4      		brne .L5
  83               	/* epilogue start */
  33:graphics.c    **** 	}
  34:graphics.c    **** }
  84               		.loc 1 34 0
  85 000e 0895      		ret
  86               		.cfi_endproc
  87               	.LFE2:
  89               		.section	.text.set_pixel,"ax",@progbits
  90               	.global	set_pixel
  92               	set_pixel:
  93               	.LFB3:
  35:graphics.c    **** void set_pixel(unsigned char x, unsigned char y, unsigned char value){
  94               		.loc 1 35 0
  95               		.cfi_startproc
  96               	.LVL8:
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 0 */
 100               	.L__stack_usage = 0
  36:graphics.c    **** 	// Sanity check (bad things happen otherwise...)
  37:graphics.c    **** 	if (x >= LCD_X || y >= LCD_Y) {
 101               		.loc 1 37 0
 102 0000 8435      		cpi r24,lo8(84)
 103 0002 00F4      		brsh .L7
 104               		.loc 1 37 0 is_stmt 0 discriminator 1
 105 0004 6033      		cpi r22,lo8(48)
 106 0006 00F4      		brsh .L7
 107               	.LVL9:
 108               	.LBB4:
 109               	.LBB5:
  38:graphics.c    **** 		return;
  39:graphics.c    **** 	}
  40:graphics.c    **** 
  41:graphics.c    **** 	// Calculate the pixel 'subrow', within that LCD row
  42:graphics.c    **** 	unsigned char row = y/8;
 110               		.loc 1 42 0 is_stmt 1
 111 0008 E62F      		mov r30,r22
 112 000a E695      		lsr r30
 113 000c E695      		lsr r30
 114 000e E695      		lsr r30
 115               	.LVL10:
  43:graphics.c    **** 	unsigned char subrow = y%8;
 116               		.loc 1 43 0
 117 0010 6770      		andi r22,lo8(7)
 118               	.LVL11:
 119 0012 94E5      		ldi r25,lo8(84)
 120 0014 E99F      		mul r30,r25
 121 0016 F001      		movw r30,r0
 122 0018 1124      		clr __zero_reg__
 123               	.LVL12:
 124 001a 90E0      		ldi r25,0
  44:graphics.c    **** 
  45:graphics.c    **** 	// Set that particular pixel in our screen buffer
  46:graphics.c    **** 	if (value){
  47:graphics.c    **** 		screen_buffer[row*84+x] |= (1 << subrow); 	//Set Pixel
 125               		.loc 1 47 0
 126 001c E80F      		add r30,r24
 127 001e F91F      		adc r31,r25
 128 0020 E050      		subi r30,lo8(-(screen_buffer))
 129 0022 F040      		sbci r31,hi8(-(screen_buffer))
  46:graphics.c    **** 		screen_buffer[row*84+x] |= (1 << subrow); 	//Set Pixel
 130               		.loc 1 46 0
 131 0024 4423      		tst r20
 132 0026 01F0      		breq .L9
 133               		.loc 1 47 0
 134 0028 21E0      		ldi r18,lo8(1)
 135 002a 30E0      		ldi r19,0
 136 002c 00C0      		rjmp 2f
 137               		1:
 138 002e 220F      		lsl r18
 139               		2:
 140 0030 6A95      		dec r22
 141 0032 02F4      		brpl 1b
 142 0034 8081      		ld r24,Z
 143               	.LVL13:
 144 0036 822B      		or r24,r18
 145               	.L10:
  48:graphics.c    **** 	} else {
  49:graphics.c    **** 		screen_buffer[row*84+x] &= ~(1 << subrow); 	//Clear Pixel
 146               		.loc 1 49 0
 147 0038 8083      		st Z,r24
 148               	.LVL14:
 149               	.L7:
 150 003a 0895      		ret
 151               	.LVL15:
 152               	.L9:
 153 003c 81E0      		ldi r24,lo8(1)
 154 003e 90E0      		ldi r25,0
 155               	.LVL16:
 156 0040 00C0      		rjmp 2f
 157               		1:
 158 0042 880F      		lsl r24
 159               		2:
 160 0044 6A95      		dec r22
 161 0046 02F4      		brpl 1b
 162 0048 8095      		com r24
 163 004a 9081      		ld r25,Z
 164 004c 8923      		and r24,r25
 165 004e 00C0      		rjmp .L10
 166               	.LBE5:
 167               	.LBE4:
 168               		.cfi_endproc
 169               	.LFE3:
 171               	.global	__floatsisf
 172               	.global	__divsf3
 173               	.global	__gesf2
 174               	.global	__addsf3
 175               	.global	__gtsf2
 176               	.global	__ltsf2
 177               	.global	__subsf3
 178               		.section	.text.draw_line,"ax",@progbits
 179               	.global	draw_line
 181               	draw_line:
 182               	.LFB4:
  50:graphics.c    **** 	}
  51:graphics.c    **** }
  52:graphics.c    **** 
  53:graphics.c    **** void draw_line(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
 183               		.loc 1 53 0
 184               		.cfi_startproc
 185               	.LVL17:
 186 0000 2F92      		push r2
 187               	.LCFI2:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 2, -2
 190 0002 3F92      		push r3
 191               	.LCFI3:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 3, -3
 194 0004 4F92      		push r4
 195               	.LCFI4:
 196               		.cfi_def_cfa_offset 5
 197               		.cfi_offset 4, -4
 198 0006 5F92      		push r5
 199               	.LCFI5:
 200               		.cfi_def_cfa_offset 6
 201               		.cfi_offset 5, -5
 202 0008 6F92      		push r6
 203               	.LCFI6:
 204               		.cfi_def_cfa_offset 7
 205               		.cfi_offset 6, -6
 206 000a 7F92      		push r7
 207               	.LCFI7:
 208               		.cfi_def_cfa_offset 8
 209               		.cfi_offset 7, -7
 210 000c 8F92      		push r8
 211               	.LCFI8:
 212               		.cfi_def_cfa_offset 9
 213               		.cfi_offset 8, -8
 214 000e 9F92      		push r9
 215               	.LCFI9:
 216               		.cfi_def_cfa_offset 10
 217               		.cfi_offset 9, -9
 218 0010 AF92      		push r10
 219               	.LCFI10:
 220               		.cfi_def_cfa_offset 11
 221               		.cfi_offset 10, -10
 222 0012 BF92      		push r11
 223               	.LCFI11:
 224               		.cfi_def_cfa_offset 12
 225               		.cfi_offset 11, -11
 226 0014 CF92      		push r12
 227               	.LCFI12:
 228               		.cfi_def_cfa_offset 13
 229               		.cfi_offset 12, -12
 230 0016 DF92      		push r13
 231               	.LCFI13:
 232               		.cfi_def_cfa_offset 14
 233               		.cfi_offset 13, -13
 234 0018 EF92      		push r14
 235               	.LCFI14:
 236               		.cfi_def_cfa_offset 15
 237               		.cfi_offset 14, -14
 238 001a FF92      		push r15
 239               	.LCFI15:
 240               		.cfi_def_cfa_offset 16
 241               		.cfi_offset 15, -15
 242 001c 0F93      		push r16
 243               	.LCFI16:
 244               		.cfi_def_cfa_offset 17
 245               		.cfi_offset 16, -16
 246 001e 1F93      		push r17
 247               	.LCFI17:
 248               		.cfi_def_cfa_offset 18
 249               		.cfi_offset 17, -17
 250 0020 CF93      		push r28
 251               	.LCFI18:
 252               		.cfi_def_cfa_offset 19
 253               		.cfi_offset 28, -18
 254 0022 DF93      		push r29
 255               	.LCFI19:
 256               		.cfi_def_cfa_offset 20
 257               		.cfi_offset 29, -19
 258 0024 CDB7      		in r28,__SP_L__
 259 0026 DEB7      		in r29,__SP_H__
 260               	.LCFI20:
 261               		.cfi_def_cfa_register 28
 262 0028 2D97      		sbiw r28,13
 263               	.LCFI21:
 264               		.cfi_def_cfa_offset 33
 265 002a 0FB6      		in __tmp_reg__,__SREG__
 266 002c F894      		cli
 267 002e DEBF      		out __SP_H__,r29
 268 0030 0FBE      		out __SREG__,__tmp_reg__
 269 0032 CDBF      		out __SP_L__,r28
 270               	/* prologue: function */
 271               	/* frame size = 13 */
 272               	/* stack size = 31 */
 273               	.L__stack_usage = 31
 274 0034 F82E      		mov r15,r24
 275 0036 262E      		mov r2,r22
 276 0038 D42E      		mov r13,r20
 277 003a E22E      		mov r14,r18
  54:graphics.c    **** 	if (x1 == x2) {
 278               		.loc 1 54 0
 279 003c 8413      		cpse r24,r20
 280 003e 00C0      		rjmp .L12
 281               	.LBB6:
  55:graphics.c    **** 		// Draw vertical line
  56:graphics.c    **** 		for (int i = y1; (y2 > y1) ? i <= y2 : i >= y2; (y2 > y1) ? i++ : i-- ) {
 282               		.loc 1 56 0
 283 0040 C62E      		mov r12,r22
 284 0042 D12C      		mov r13,__zero_reg__
 285               	.LVL18:
 286 0044 022F      		mov r16,r18
 287 0046 10E0      		ldi r17,0
 288               	.LVL19:
 289               	.L13:
 290               		.loc 1 56 0 is_stmt 0 discriminator 5
 291 0048 2E14      		cp r2,r14
 292 004a 00F4      		brsh .L14
 293               		.loc 1 56 0 discriminator 6
 294 004c 0C15      		cp r16,r12
 295 004e 1D05      		cpc r17,r13
 296 0050 04F0      		brlt .+2
 297 0052 00C0      		rjmp .L15
 298               	.LVL20:
 299               	.L11:
 300               	/* epilogue start */
 301               	.LBE6:
  57:graphics.c    **** 			set_pixel(x1, i, 1);
  58:graphics.c    **** 		}
  59:graphics.c    **** 	} else if (y1 == y2) {
  60:graphics.c    **** 		// Draw horizontal line
  61:graphics.c    **** 		for (int i = x1; (x2 > x1) ? i <= x2 : i >= x2; (x2 > x1) ? i++ : i-- ) {
  62:graphics.c    **** 			set_pixel(i, y1, 1);
  63:graphics.c    **** 		}
  64:graphics.c    **** 	} else {
  65:graphics.c    **** 		// Get Bresenhaming...
  66:graphics.c    **** 		float dx = x2-x1;
  67:graphics.c    **** 		float dy = y2-y1;
  68:graphics.c    **** 		float err = 0.0;
  69:graphics.c    **** 		float derr = ABS(dy/dx);
  70:graphics.c    **** 
  71:graphics.c    **** 		for (int x = x1, y = y1; (dx > 0) ? x<=x2 : x>=x2; (dx > 0) ? x++ : x--) {
  72:graphics.c    **** 			set_pixel(x, y, 1);
  73:graphics.c    **** 			err += derr;
  74:graphics.c    **** 			while (err >= 0.5 && ((dy > 0) ? y<=y2 : y>=y2) ) {
  75:graphics.c    **** 				set_pixel(x, y, 1);
  76:graphics.c    **** 				y += (dy > 0) - (dy < 0);
  77:graphics.c    **** 				err -= 1.0;
  78:graphics.c    **** 			}
  79:graphics.c    **** 		}
  80:graphics.c    **** 	}
  81:graphics.c    **** }
 302               		.loc 1 81 0 is_stmt 1
 303 0054 2D96      		adiw r28,13
 304 0056 0FB6      		in __tmp_reg__,__SREG__
 305 0058 F894      		cli
 306 005a DEBF      		out __SP_H__,r29
 307 005c 0FBE      		out __SREG__,__tmp_reg__
 308 005e CDBF      		out __SP_L__,r28
 309 0060 DF91      		pop r29
 310 0062 CF91      		pop r28
 311 0064 1F91      		pop r17
 312 0066 0F91      		pop r16
 313 0068 FF90      		pop r15
 314               	.LVL21:
 315 006a EF90      		pop r14
 316               	.LVL22:
 317 006c DF90      		pop r13
 318 006e CF90      		pop r12
 319 0070 BF90      		pop r11
 320 0072 AF90      		pop r10
 321 0074 9F90      		pop r9
 322 0076 8F90      		pop r8
 323 0078 7F90      		pop r7
 324 007a 6F90      		pop r6
 325 007c 5F90      		pop r5
 326 007e 4F90      		pop r4
 327 0080 3F90      		pop r3
 328 0082 2F90      		pop r2
 329 0084 0895      		ret
 330               	.LVL23:
 331               	.L14:
 332               	.LBB7:
  56:graphics.c    **** 			set_pixel(x1, i, 1);
 333               		.loc 1 56 0 discriminator 7
 334 0086 C016      		cp r12,r16
 335 0088 D106      		cpc r13,r17
 336 008a 04F0      		brlt .L11
  57:graphics.c    **** 			set_pixel(x1, i, 1);
 337               		.loc 1 57 0
 338 008c 41E0      		ldi r20,lo8(1)
 339 008e 6C2D      		mov r22,r12
 340 0090 8F2D      		mov r24,r15
 341 0092 0E94 0000 		call set_pixel
 342               	.LVL24:
  56:graphics.c    **** 			set_pixel(x1, i, 1);
 343               		.loc 1 56 0
 344 0096 E1E0      		ldi r30,1
 345 0098 CE1A      		sub r12,r30
 346 009a D108      		sbc r13,__zero_reg__
 347               	.LVL25:
 348 009c 00C0      		rjmp .L13
 349               	.LVL26:
 350               	.L12:
 351 009e 082F      		mov r16,r24
 352 00a0 10E0      		ldi r17,0
 353 00a2 242F      		mov r18,r20
 354 00a4 30E0      		ldi r19,0
 355 00a6 3D87      		std Y+13,r19
 356 00a8 2C87      		std Y+12,r18
 357               	.LBE7:
  59:graphics.c    **** 		// Draw horizontal line
 358               		.loc 1 59 0
 359 00aa 6E11      		cpse r22,r14
 360 00ac 00C0      		rjmp .L18
 361               	.L19:
 362               	.LVL27:
 363               	.LBB8:
  61:graphics.c    **** 			set_pixel(i, y1, 1);
 364               		.loc 1 61 0 discriminator 5
 365 00ae FD14      		cp r15,r13
 366 00b0 00F4      		brsh .L20
  61:graphics.c    **** 			set_pixel(i, y1, 1);
 367               		.loc 1 61 0 is_stmt 0 discriminator 6
 368 00b2 8C85      		ldd r24,Y+12
 369 00b4 9D85      		ldd r25,Y+13
 370 00b6 8017      		cp r24,r16
 371 00b8 9107      		cpc r25,r17
 372 00ba 04F0      		brlt .L11
  62:graphics.c    **** 		}
 373               		.loc 1 62 0 is_stmt 1
 374 00bc 41E0      		ldi r20,lo8(1)
 375 00be 622D      		mov r22,r2
 376 00c0 802F      		mov r24,r16
 377 00c2 0E94 0000 		call set_pixel
 378               	.LVL28:
  61:graphics.c    **** 			set_pixel(i, y1, 1);
 379               		.loc 1 61 0
 380 00c6 0F5F      		subi r16,-1
 381 00c8 1F4F      		sbci r17,-1
 382               	.LVL29:
 383 00ca 00C0      		rjmp .L19
 384               	.L20:
  61:graphics.c    **** 			set_pixel(i, y1, 1);
 385               		.loc 1 61 0 is_stmt 0 discriminator 7
 386 00cc EC85      		ldd r30,Y+12
 387 00ce FD85      		ldd r31,Y+13
 388 00d0 0E17      		cp r16,r30
 389 00d2 1F07      		cpc r17,r31
 390 00d4 04F4      		brge .+2
 391 00d6 00C0      		rjmp .L11
  62:graphics.c    **** 		}
 392               		.loc 1 62 0 is_stmt 1
 393 00d8 41E0      		ldi r20,lo8(1)
 394 00da 622D      		mov r22,r2
 395 00dc 802F      		mov r24,r16
 396 00de 0E94 0000 		call set_pixel
 397               	.LVL30:
  61:graphics.c    **** 			set_pixel(i, y1, 1);
 398               		.loc 1 61 0
 399 00e2 0150      		subi r16,1
 400 00e4 1109      		sbc r17,__zero_reg__
 401               	.LVL31:
 402 00e6 00C0      		rjmp .L19
 403               	.LVL32:
 404               	.L18:
 405               	.LBE8:
 406               	.LBB9:
  66:graphics.c    **** 		float dy = y2-y1;
 407               		.loc 1 66 0
 408 00e8 6C85      		ldd r22,Y+12
 409 00ea 7D85      		ldd r23,Y+13
 410 00ec 601B      		sub r22,r16
 411 00ee 710B      		sbc r23,r17
 412 00f0 072E      		mov __tmp_reg__,r23
 413 00f2 000C      		lsl r0
 414 00f4 880B      		sbc r24,r24
 415 00f6 990B      		sbc r25,r25
 416 00f8 0E94 0000 		call __floatsisf
 417               	.LVL33:
 418 00fc 2B01      		movw r4,r22
 419 00fe 3C01      		movw r6,r24
 420               	.LVL34:
  67:graphics.c    **** 		float err = 0.0;
 421               		.loc 1 67 0
 422 0100 2E2D      		mov r18,r14
 423 0102 30E0      		ldi r19,0
 424 0104 3E83      		std Y+6,r19
 425 0106 2D83      		std Y+5,r18
 426 0108 312C      		mov r3,__zero_reg__
 427 010a B901      		movw r22,r18
 428 010c 6219      		sub r22,r2
 429 010e 7309      		sbc r23,r3
 430 0110 072E      		mov __tmp_reg__,r23
 431 0112 000C      		lsl r0
 432 0114 880B      		sbc r24,r24
 433 0116 990B      		sbc r25,r25
 434 0118 0E94 0000 		call __floatsisf
 435               	.LVL35:
 436 011c 4B01      		movw r8,r22
 437 011e 5C01      		movw r10,r24
 438               	.LVL36:
  69:graphics.c    **** 
 439               		.loc 1 69 0
 440 0120 A301      		movw r20,r6
 441 0122 9201      		movw r18,r4
 442 0124 0E94 0000 		call __divsf3
 443               	.LVL37:
 444 0128 6983      		std Y+1,r22
 445 012a 7A83      		std Y+2,r23
 446 012c 8B83      		std Y+3,r24
 447 012e 9C83      		std Y+4,r25
 448 0130 20E0      		ldi r18,0
 449 0132 30E0      		ldi r19,0
 450 0134 A901      		movw r20,r18
 451 0136 0E94 0000 		call __gesf2
 452               	.LVL38:
 453 013a 87FF      		sbrs r24,7
 454 013c 00C0      		rjmp .L23
  69:graphics.c    **** 
 455               		.loc 1 69 0 is_stmt 0 discriminator 2
 456 013e A301      		movw r20,r6
 457 0140 9201      		movw r18,r4
 458 0142 C501      		movw r24,r10
 459 0144 B401      		movw r22,r8
 460 0146 9058      		subi r25,0x80
 461 0148 0E94 0000 		call __divsf3
 462               	.LVL39:
 463 014c 6983      		std Y+1,r22
 464 014e 7A83      		std Y+2,r23
 465 0150 8B83      		std Y+3,r24
 466 0152 9C83      		std Y+4,r25
 467               	.L23:
 468               	.LVL40:
  68:graphics.c    **** 		float derr = ABS(dy/dx);
 469               		.loc 1 68 0 is_stmt 1 discriminator 4
 470 0154 C12C      		mov r12,__zero_reg__
 471 0156 D12C      		mov r13,__zero_reg__
 472 0158 7601      		movw r14,r12
 473               	.LVL41:
 474               	.L24:
 475               	.LBB10:
  71:graphics.c    **** 			set_pixel(x, y, 1);
 476               		.loc 1 71 0 discriminator 5
 477 015a 20E0      		ldi r18,0
 478 015c 30E0      		ldi r19,0
 479 015e A901      		movw r20,r18
 480 0160 C301      		movw r24,r6
 481 0162 B201      		movw r22,r4
 482 0164 0E94 0000 		call __gtsf2
 483               	.LVL42:
 484 0168 1816      		cp __zero_reg__,r24
 485 016a 04F0      		brlt .+2
 486 016c 00C0      		rjmp .L48
  71:graphics.c    **** 			set_pixel(x, y, 1);
 487               		.loc 1 71 0 is_stmt 0 discriminator 6
 488 016e 2C85      		ldd r18,Y+12
 489 0170 3D85      		ldd r19,Y+13
 490 0172 2017      		cp r18,r16
 491 0174 3107      		cpc r19,r17
 492 0176 04F4      		brge .+2
 493 0178 00C0      		rjmp .L11
 494               	.L41:
  72:graphics.c    **** 			err += derr;
 495               		.loc 1 72 0 is_stmt 1
 496 017a 0B87      		std Y+11,r16
 497 017c 41E0      		ldi r20,lo8(1)
 498 017e 622D      		mov r22,r2
 499 0180 802F      		mov r24,r16
 500 0182 0E94 0000 		call set_pixel
 501               	.LVL43:
  73:graphics.c    **** 			while (err >= 0.5 && ((dy > 0) ? y<=y2 : y>=y2) ) {
 502               		.loc 1 73 0
 503 0186 2981      		ldd r18,Y+1
 504 0188 3A81      		ldd r19,Y+2
 505 018a 4B81      		ldd r20,Y+3
 506 018c 5C81      		ldd r21,Y+4
 507 018e C701      		movw r24,r14
 508 0190 B601      		movw r22,r12
 509 0192 0E94 0000 		call __addsf3
 510               	.LVL44:
 511               	.L49:
  77:graphics.c    **** 			}
 512               		.loc 1 77 0
 513 0196 6B01      		movw r12,r22
 514 0198 7C01      		movw r14,r24
 515               	.LVL45:
  74:graphics.c    **** 				set_pixel(x, y, 1);
 516               		.loc 1 74 0
 517 019a 20E0      		ldi r18,0
 518 019c 30E0      		ldi r19,0
 519 019e 40E0      		ldi r20,0
 520 01a0 5FE3      		ldi r21,lo8(63)
 521 01a2 0E94 0000 		call __gesf2
 522               	.LVL46:
 523 01a6 87FF      		sbrs r24,7
 524 01a8 00C0      		rjmp .L28
 525               	.L34:
  71:graphics.c    **** 			set_pixel(x, y, 1);
 526               		.loc 1 71 0
 527 01aa 20E0      		ldi r18,0
 528 01ac 30E0      		ldi r19,0
 529 01ae A901      		movw r20,r18
 530 01b0 C301      		movw r24,r6
 531 01b2 B201      		movw r22,r4
 532 01b4 0E94 0000 		call __gtsf2
 533               	.LVL47:
 534 01b8 1816      		cp __zero_reg__,r24
 535 01ba 04F4      		brge .+2
 536 01bc 00C0      		rjmp .L29
  71:graphics.c    **** 			set_pixel(x, y, 1);
 537               		.loc 1 71 0 is_stmt 0 discriminator 3
 538 01be 0150      		subi r16,1
 539 01c0 1109      		sbc r17,__zero_reg__
 540               	.LVL48:
 541 01c2 00C0      		rjmp .L24
 542               	.L28:
  74:graphics.c    **** 				set_pixel(x, y, 1);
 543               		.loc 1 74 0 is_stmt 1 discriminator 1
 544 01c4 20E0      		ldi r18,0
 545 01c6 30E0      		ldi r19,0
 546 01c8 A901      		movw r20,r18
 547 01ca C501      		movw r24,r10
 548 01cc B401      		movw r22,r8
 549 01ce 0E94 0000 		call __gtsf2
 550               	.LVL49:
 551 01d2 1816      		cp __zero_reg__,r24
 552 01d4 04F4      		brge .L47
  74:graphics.c    **** 				set_pixel(x, y, 1);
 553               		.loc 1 74 0 is_stmt 0 discriminator 2
 554 01d6 8D81      		ldd r24,Y+5
 555 01d8 9E81      		ldd r25,Y+6
 556 01da 8215      		cp r24,r2
 557 01dc 9305      		cpc r25,r3
 558 01de 04F0      		brlt .L34
 559               	.L33:
  75:graphics.c    **** 				y += (dy > 0) - (dy < 0);
 560               		.loc 1 75 0 is_stmt 1
 561 01e0 41E0      		ldi r20,lo8(1)
 562 01e2 622D      		mov r22,r2
 563 01e4 8B85      		ldd r24,Y+11
 564 01e6 0E94 0000 		call set_pixel
 565               	.LVL50:
  76:graphics.c    **** 				err -= 1.0;
 566               		.loc 1 76 0
 567 01ea 81E0      		ldi r24,lo8(1)
 568 01ec 90E0      		ldi r25,0
 569 01ee 9887      		std Y+8,r25
 570 01f0 8F83      		std Y+7,r24
 571 01f2 20E0      		ldi r18,0
 572 01f4 30E0      		ldi r19,0
 573 01f6 A901      		movw r20,r18
 574 01f8 C501      		movw r24,r10
 575 01fa B401      		movw r22,r8
 576 01fc 0E94 0000 		call __gtsf2
 577               	.LVL51:
 578 0200 1816      		cp __zero_reg__,r24
 579 0202 04F0      		brlt .L26
 580 0204 1886      		std Y+8,__zero_reg__
 581 0206 1F82      		std Y+7,__zero_reg__
 582               	.L26:
 583 0208 E1E0      		ldi r30,lo8(1)
 584 020a F0E0      		ldi r31,0
 585 020c FA87      		std Y+10,r31
 586 020e E987      		std Y+9,r30
 587 0210 20E0      		ldi r18,0
 588 0212 30E0      		ldi r19,0
 589 0214 A901      		movw r20,r18
 590 0216 C501      		movw r24,r10
 591 0218 B401      		movw r22,r8
 592 021a 0E94 0000 		call __ltsf2
 593               	.LVL52:
 594 021e 87FD      		sbrc r24,7
 595 0220 00C0      		rjmp .L27
 596 0222 1A86      		std Y+10,__zero_reg__
 597 0224 1986      		std Y+9,__zero_reg__
 598               	.L27:
 599 0226 8F81      		ldd r24,Y+7
 600 0228 9885      		ldd r25,Y+8
 601 022a 2985      		ldd r18,Y+9
 602 022c 3A85      		ldd r19,Y+10
 603 022e 821B      		sub r24,r18
 604 0230 930B      		sbc r25,r19
 605 0232 280E      		add r2,r24
 606 0234 391E      		adc r3,r25
 607               	.LVL53:
  77:graphics.c    **** 			}
 608               		.loc 1 77 0
 609 0236 20E0      		ldi r18,0
 610 0238 30E0      		ldi r19,0
 611 023a 40E8      		ldi r20,lo8(-128)
 612 023c 5FE3      		ldi r21,lo8(63)
 613 023e C701      		movw r24,r14
 614 0240 B601      		movw r22,r12
 615 0242 0E94 0000 		call __subsf3
 616               	.LVL54:
 617 0246 00C0      		rjmp .L49
 618               	.L47:
  74:graphics.c    **** 				set_pixel(x, y, 1);
 619               		.loc 1 74 0 discriminator 3
 620 0248 ED81      		ldd r30,Y+5
 621 024a FE81      		ldd r31,Y+6
 622 024c 2E16      		cp r2,r30
 623 024e 3F06      		cpc r3,r31
 624 0250 04F4      		brge .L33
 625 0252 00C0      		rjmp .L34
 626               	.L29:
  71:graphics.c    **** 			set_pixel(x, y, 1);
 627               		.loc 1 71 0 discriminator 2
 628 0254 0F5F      		subi r16,-1
 629 0256 1F4F      		sbci r17,-1
 630               	.LVL55:
 631 0258 00C0      		rjmp .L24
 632               	.L48:
  71:graphics.c    **** 			set_pixel(x, y, 1);
 633               		.loc 1 71 0 is_stmt 0 discriminator 7
 634 025a 8C85      		ldd r24,Y+12
 635 025c 9D85      		ldd r25,Y+13
 636 025e 0817      		cp r16,r24
 637 0260 1907      		cpc r17,r25
 638 0262 04F0      		brlt .+2
 639 0264 00C0      		rjmp .L41
 640 0266 00C0      		rjmp .L11
 641               	.LVL56:
 642               	.L15:
 643               	.LBE10:
 644               	.LBE9:
 645               	.LBB11:
  57:graphics.c    **** 		}
 646               		.loc 1 57 0 is_stmt 1
 647 0268 41E0      		ldi r20,lo8(1)
 648 026a 6C2D      		mov r22,r12
 649 026c 8F2D      		mov r24,r15
 650 026e 0E94 0000 		call set_pixel
 651               	.LVL57:
  56:graphics.c    **** 			set_pixel(x1, i, 1);
 652               		.loc 1 56 0
 653 0272 9FEF      		ldi r25,-1
 654 0274 C91A      		sub r12,r25
 655 0276 D90A      		sbc r13,r25
 656               	.LVL58:
 657 0278 00C0      		rjmp .L13
 658               	.LBE11:
 659               		.cfi_endproc
 660               	.LFE4:
 662               		.section	.text.draw_char,"ax",@progbits
 663               	.global	draw_char
 665               	draw_char:
 666               	.LFB5:
  82:graphics.c    **** 
  83:graphics.c    **** void draw_char(unsigned char top_left_x, unsigned char top_left_y, char character) {
 667               		.loc 1 83 0
 668               		.cfi_startproc
 669               	.LVL59:
 670 0000 7F92      		push r7
 671               	.LCFI22:
 672               		.cfi_def_cfa_offset 3
 673               		.cfi_offset 7, -2
 674 0002 8F92      		push r8
 675               	.LCFI23:
 676               		.cfi_def_cfa_offset 4
 677               		.cfi_offset 8, -3
 678 0004 9F92      		push r9
 679               	.LCFI24:
 680               		.cfi_def_cfa_offset 5
 681               		.cfi_offset 9, -4
 682 0006 AF92      		push r10
 683               	.LCFI25:
 684               		.cfi_def_cfa_offset 6
 685               		.cfi_offset 10, -5
 686 0008 BF92      		push r11
 687               	.LCFI26:
 688               		.cfi_def_cfa_offset 7
 689               		.cfi_offset 11, -6
 690 000a CF92      		push r12
 691               	.LCFI27:
 692               		.cfi_def_cfa_offset 8
 693               		.cfi_offset 12, -7
 694 000c DF92      		push r13
 695               	.LCFI28:
 696               		.cfi_def_cfa_offset 9
 697               		.cfi_offset 13, -8
 698 000e EF92      		push r14
 699               	.LCFI29:
 700               		.cfi_def_cfa_offset 10
 701               		.cfi_offset 14, -9
 702 0010 FF92      		push r15
 703               	.LCFI30:
 704               		.cfi_def_cfa_offset 11
 705               		.cfi_offset 15, -10
 706 0012 0F93      		push r16
 707               	.LCFI31:
 708               		.cfi_def_cfa_offset 12
 709               		.cfi_offset 16, -11
 710 0014 1F93      		push r17
 711               	.LCFI32:
 712               		.cfi_def_cfa_offset 13
 713               		.cfi_offset 17, -12
 714 0016 CF93      		push r28
 715               	.LCFI33:
 716               		.cfi_def_cfa_offset 14
 717               		.cfi_offset 28, -13
 718 0018 DF93      		push r29
 719               	.LCFI34:
 720               		.cfi_def_cfa_offset 15
 721               		.cfi_offset 29, -14
 722               	/* prologue: function */
 723               	/* frame size = 0 */
 724               	/* stack size = 13 */
 725               	.L__stack_usage = 13
 726 001a 882E      		mov r8,r24
 727 001c 762E      		mov r7,r22
 728               	.LVL60:
 729               	.LBB12:
 730               	.LBB13:
 731               	.LBB14:
  84:graphics.c    **** 	int char_width = 5;
  85:graphics.c    **** 	int char_height = 8;
  86:graphics.c    **** 
  87:graphics.c    **** 	// loop through each pixel in the character array and plot each one individually
  88:graphics.c    **** 	for (unsigned char i = 0; i<char_width; i++) {
  89:graphics.c    **** 		for (unsigned char j = 0; j<char_height; j++) {
  90:graphics.c    **** 			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) 
 732               		.loc 1 90 0
 733 001e 50E0      		ldi r21,0
 734 0020 4052      		subi r20,32
 735 0022 5109      		sbc r21,__zero_reg__
 736               	.LVL61:
 737 0024 85E0      		ldi r24,lo8(5)
 738               	.LVL62:
 739 0026 849F      		mul r24,r20
 740 0028 6001      		movw r12,r0
 741 002a 859F      		mul r24,r21
 742 002c D00C      		add r13,r0
 743 002e 1124      		clr __zero_reg__
 744 0030 00E0      		ldi r16,0
 745 0032 10E0      		ldi r17,0
 746               	.LBE14:
 747 0034 AA24      		clr r10
 748 0036 A394      		inc r10
 749 0038 B12C      		mov r11,__zero_reg__
 750               	.LVL63:
 751               	.L51:
 752 003a C601      		movw r24,r12
 753 003c 800F      		add r24,r16
 754 003e 911F      		adc r25,r17
 755 0040 9C01      		movw r18,r24
 756 0042 2050      		subi r18,lo8(-(ASCII))
 757 0044 3040      		sbci r19,hi8(-(ASCII))
 758 0046 7901      		movw r14,r18
 759               	.LBE13:
 760               	.LBE12:
  83:graphics.c    **** 	int char_width = 5;
 761               		.loc 1 83 0
 762 0048 C0E0      		ldi r28,0
 763 004a D0E0      		ldi r29,0
 764               	.LBB17:
 765               	.LBB16:
 766               		.loc 1 90 0
 767 004c 982C      		mov r9,r8
 768 004e 900E      		add r9,r16
 769 0050 00C0      		rjmp .L54
 770               	.LVL64:
 771               	.L52:
 772               	.LBB15:
 773               		.loc 1 90 0 is_stmt 0 discriminator 3
 774 0052 F701      		movw r30,r14
 775               	/* #APP */
 776               	 ;  90 "graphics.c" 1
 777 0054 8491      		lpm r24, Z
 778               		
 779               	 ;  0 "" 2
 780               	/* #NOAPP */
 781               	.LBE15:
 782 0056 A501      		movw r20,r10
 783 0058 0C2E      		mov r0,r28
 784 005a 00C0      		rjmp 2f
 785               		1:
 786 005c 440F      		lsl r20
 787 005e 551F      		rol r21
 788               		2:
 789 0060 0A94      		dec r0
 790 0062 02F4      		brpl 1b
 791 0064 90E0      		ldi r25,0
 792 0066 4823      		and r20,r24
 793 0068 5923      		and r21,r25
 794 006a 0C2E      		mov r0,r28
 795 006c 00C0      		rjmp 2f
 796               		1:
 797 006e 5595      		asr r21
 798 0070 4795      		ror r20
 799               		2:
 800 0072 0A94      		dec r0
 801 0074 02F4      		brpl 1b
 802 0076 6C2F      		mov r22,r28
 803 0078 670D      		add r22,r7
 804 007a 892D      		mov r24,r9
 805 007c 0E94 0000 		call set_pixel
 806               	.LVL65:
 807 0080 2196      		adiw r28,1
 808               	.LVL66:
 809               	.L54:
  89:graphics.c    **** 			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) 
 810               		.loc 1 89 0 is_stmt 1 discriminator 1
 811 0082 C830      		cpi r28,8
 812 0084 D105      		cpc r29,__zero_reg__
 813 0086 01F4      		brne .L52
 814               	.LVL67:
 815 0088 0F5F      		subi r16,-1
 816 008a 1F4F      		sbci r17,-1
 817               	.LVL68:
 818               	.LBE16:
  88:graphics.c    **** 		for (unsigned char j = 0; j<char_height; j++) {
 819               		.loc 1 88 0 discriminator 2
 820 008c 0530      		cpi r16,5
 821 008e 1105      		cpc r17,__zero_reg__
 822 0090 01F4      		brne .L51
 823               	/* epilogue start */
 824               	.LBE17:
  91:graphics.c    **** 		}
  92:graphics.c    **** 	}
  93:graphics.c    **** }
 825               		.loc 1 93 0
 826 0092 DF91      		pop r29
 827 0094 CF91      		pop r28
 828               	.LVL69:
 829 0096 1F91      		pop r17
 830 0098 0F91      		pop r16
 831               	.LVL70:
 832 009a FF90      		pop r15
 833 009c EF90      		pop r14
 834 009e DF90      		pop r13
 835 00a0 CF90      		pop r12
 836 00a2 BF90      		pop r11
 837 00a4 AF90      		pop r10
 838 00a6 9F90      		pop r9
 839 00a8 8F90      		pop r8
 840               	.LVL71:
 841 00aa 7F90      		pop r7
 842               	.LVL72:
 843 00ac 0895      		ret
 844               		.cfi_endproc
 845               	.LFE5:
 847               		.section	.text.draw_string,"ax",@progbits
 848               	.global	draw_string
 850               	draw_string:
 851               	.LFB6:
  94:graphics.c    **** 
  95:graphics.c    **** void draw_string(unsigned char top_left_x, unsigned char top_left_y, char *characters) {
 852               		.loc 1 95 0
 853               		.cfi_startproc
 854               	.LVL73:
 855 0000 0F93      		push r16
 856               	.LCFI35:
 857               		.cfi_def_cfa_offset 3
 858               		.cfi_offset 16, -2
 859 0002 1F93      		push r17
 860               	.LCFI36:
 861               		.cfi_def_cfa_offset 4
 862               		.cfi_offset 17, -3
 863 0004 CF93      		push r28
 864               	.LCFI37:
 865               		.cfi_def_cfa_offset 5
 866               		.cfi_offset 28, -4
 867 0006 DF93      		push r29
 868               	.LCFI38:
 869               		.cfi_def_cfa_offset 6
 870               		.cfi_offset 29, -5
 871               	/* prologue: function */
 872               	/* frame size = 0 */
 873               	/* stack size = 4 */
 874               	.L__stack_usage = 4
 875 0008 C82F      		mov r28,r24
 876 000a D62F      		mov r29,r22
 877 000c 8A01      		movw r16,r20
 878               	.LVL74:
 879               	.L56:
  96:graphics.c    **** 	unsigned char i = 0;
  97:graphics.c    **** 
  98:graphics.c    **** 	// Draw each character until the null terminator is reached
  99:graphics.c    **** 	while (*characters != 0) {
 880               		.loc 1 99 0
 881 000e F801      		movw r30,r16
 882 0010 4191      		ld r20,Z+
 883 0012 8F01      		movw r16,r30
 884               	.LVL75:
 885 0014 4111      		cpse r20,__zero_reg__
 886 0016 00C0      		rjmp .L57
 887               	/* epilogue start */
 100:graphics.c    **** 		draw_char(top_left_x+i*5, top_left_y, *(characters));
 101:graphics.c    **** 
 102:graphics.c    **** 		// Add a column of spaces here if you want to space out the lettering.
 103:graphics.c    **** 	    // (see lcd.c for a hint on how to do this)
 104:graphics.c    **** 
 105:graphics.c    **** 		characters++;
 106:graphics.c    **** 		i++;
 107:graphics.c    **** 	}
 108:graphics.c    **** }
 888               		.loc 1 108 0
 889 0018 DF91      		pop r29
 890               	.LVL76:
 891 001a CF91      		pop r28
 892 001c 1F91      		pop r17
 893 001e 0F91      		pop r16
 894               	.LVL77:
 895 0020 0895      		ret
 896               	.LVL78:
 897               	.L57:
 100:graphics.c    **** 		draw_char(top_left_x+i*5, top_left_y, *(characters));
 898               		.loc 1 100 0
 899 0022 6D2F      		mov r22,r29
 900 0024 8C2F      		mov r24,r28
 901 0026 0E94 0000 		call draw_char
 902               	.LVL79:
 903 002a CB5F      		subi r28,lo8(-(5))
 904 002c 00C0      		rjmp .L56
 905               		.cfi_endproc
 906               	.LFE6:
 908               		.comm	screen_buffer,504,1
 909               		.section	.progmem.data,"a",@progbits
 912               	ASCII:
 913 0000 00        		.byte	0
 914 0001 00        		.byte	0
 915 0002 00        		.byte	0
 916 0003 00        		.byte	0
 917 0004 00        		.byte	0
 918 0005 00        		.byte	0
 919 0006 00        		.byte	0
 920 0007 5F        		.byte	95
 921 0008 00        		.byte	0
 922 0009 00        		.byte	0
 923 000a 00        		.byte	0
 924 000b 07        		.byte	7
 925 000c 00        		.byte	0
 926 000d 07        		.byte	7
 927 000e 00        		.byte	0
 928 000f 14        		.byte	20
 929 0010 7F        		.byte	127
 930 0011 14        		.byte	20
 931 0012 7F        		.byte	127
 932 0013 14        		.byte	20
 933 0014 24        		.byte	36
 934 0015 2A        		.byte	42
 935 0016 7F        		.byte	127
 936 0017 2A        		.byte	42
 937 0018 12        		.byte	18
 938 0019 23        		.byte	35
 939 001a 13        		.byte	19
 940 001b 08        		.byte	8
 941 001c 64        		.byte	100
 942 001d 62        		.byte	98
 943 001e 36        		.byte	54
 944 001f 49        		.byte	73
 945 0020 55        		.byte	85
 946 0021 22        		.byte	34
 947 0022 50        		.byte	80
 948 0023 00        		.byte	0
 949 0024 05        		.byte	5
 950 0025 03        		.byte	3
 951 0026 00        		.byte	0
 952 0027 00        		.byte	0
 953 0028 00        		.byte	0
 954 0029 1C        		.byte	28
 955 002a 22        		.byte	34
 956 002b 41        		.byte	65
 957 002c 00        		.byte	0
 958 002d 00        		.byte	0
 959 002e 41        		.byte	65
 960 002f 22        		.byte	34
 961 0030 1C        		.byte	28
 962 0031 00        		.byte	0
 963 0032 14        		.byte	20
 964 0033 08        		.byte	8
 965 0034 3E        		.byte	62
 966 0035 08        		.byte	8
 967 0036 14        		.byte	20
 968 0037 08        		.byte	8
 969 0038 08        		.byte	8
 970 0039 3E        		.byte	62
 971 003a 08        		.byte	8
 972 003b 08        		.byte	8
 973 003c 00        		.byte	0
 974 003d 50        		.byte	80
 975 003e 30        		.byte	48
 976 003f 00        		.byte	0
 977 0040 00        		.byte	0
 978 0041 08        		.byte	8
 979 0042 08        		.byte	8
 980 0043 08        		.byte	8
 981 0044 08        		.byte	8
 982 0045 08        		.byte	8
 983 0046 00        		.byte	0
 984 0047 60        		.byte	96
 985 0048 60        		.byte	96
 986 0049 00        		.byte	0
 987 004a 00        		.byte	0
 988 004b 20        		.byte	32
 989 004c 10        		.byte	16
 990 004d 08        		.byte	8
 991 004e 04        		.byte	4
 992 004f 02        		.byte	2
 993 0050 3E        		.byte	62
 994 0051 51        		.byte	81
 995 0052 49        		.byte	73
 996 0053 45        		.byte	69
 997 0054 3E        		.byte	62
 998 0055 00        		.byte	0
 999 0056 42        		.byte	66
 1000 0057 7F        		.byte	127
 1001 0058 40        		.byte	64
 1002 0059 00        		.byte	0
 1003 005a 42        		.byte	66
 1004 005b 61        		.byte	97
 1005 005c 51        		.byte	81
 1006 005d 49        		.byte	73
 1007 005e 46        		.byte	70
 1008 005f 21        		.byte	33
 1009 0060 41        		.byte	65
 1010 0061 45        		.byte	69
 1011 0062 4B        		.byte	75
 1012 0063 31        		.byte	49
 1013 0064 18        		.byte	24
 1014 0065 14        		.byte	20
 1015 0066 12        		.byte	18
 1016 0067 7F        		.byte	127
 1017 0068 10        		.byte	16
 1018 0069 27        		.byte	39
 1019 006a 45        		.byte	69
 1020 006b 45        		.byte	69
 1021 006c 45        		.byte	69
 1022 006d 39        		.byte	57
 1023 006e 3C        		.byte	60
 1024 006f 4A        		.byte	74
 1025 0070 49        		.byte	73
 1026 0071 49        		.byte	73
 1027 0072 30        		.byte	48
 1028 0073 01        		.byte	1
 1029 0074 71        		.byte	113
 1030 0075 09        		.byte	9
 1031 0076 05        		.byte	5
 1032 0077 03        		.byte	3
 1033 0078 36        		.byte	54
 1034 0079 49        		.byte	73
 1035 007a 49        		.byte	73
 1036 007b 49        		.byte	73
 1037 007c 36        		.byte	54
 1038 007d 06        		.byte	6
 1039 007e 49        		.byte	73
 1040 007f 49        		.byte	73
 1041 0080 29        		.byte	41
 1042 0081 1E        		.byte	30
 1043 0082 00        		.byte	0
 1044 0083 36        		.byte	54
 1045 0084 36        		.byte	54
 1046 0085 00        		.byte	0
 1047 0086 00        		.byte	0
 1048 0087 00        		.byte	0
 1049 0088 56        		.byte	86
 1050 0089 36        		.byte	54
 1051 008a 00        		.byte	0
 1052 008b 00        		.byte	0
 1053 008c 08        		.byte	8
 1054 008d 14        		.byte	20
 1055 008e 22        		.byte	34
 1056 008f 41        		.byte	65
 1057 0090 00        		.byte	0
 1058 0091 14        		.byte	20
 1059 0092 14        		.byte	20
 1060 0093 14        		.byte	20
 1061 0094 14        		.byte	20
 1062 0095 14        		.byte	20
 1063 0096 00        		.byte	0
 1064 0097 41        		.byte	65
 1065 0098 22        		.byte	34
 1066 0099 14        		.byte	20
 1067 009a 08        		.byte	8
 1068 009b 02        		.byte	2
 1069 009c 01        		.byte	1
 1070 009d 51        		.byte	81
 1071 009e 09        		.byte	9
 1072 009f 06        		.byte	6
 1073 00a0 32        		.byte	50
 1074 00a1 49        		.byte	73
 1075 00a2 79        		.byte	121
 1076 00a3 41        		.byte	65
 1077 00a4 3E        		.byte	62
 1078 00a5 7E        		.byte	126
 1079 00a6 11        		.byte	17
 1080 00a7 11        		.byte	17
 1081 00a8 11        		.byte	17
 1082 00a9 7E        		.byte	126
 1083 00aa 7F        		.byte	127
 1084 00ab 49        		.byte	73
 1085 00ac 49        		.byte	73
 1086 00ad 49        		.byte	73
 1087 00ae 36        		.byte	54
 1088 00af 3E        		.byte	62
 1089 00b0 41        		.byte	65
 1090 00b1 41        		.byte	65
 1091 00b2 41        		.byte	65
 1092 00b3 22        		.byte	34
 1093 00b4 7F        		.byte	127
 1094 00b5 41        		.byte	65
 1095 00b6 41        		.byte	65
 1096 00b7 22        		.byte	34
 1097 00b8 1C        		.byte	28
 1098 00b9 7F        		.byte	127
 1099 00ba 49        		.byte	73
 1100 00bb 49        		.byte	73
 1101 00bc 49        		.byte	73
 1102 00bd 41        		.byte	65
 1103 00be 7F        		.byte	127
 1104 00bf 09        		.byte	9
 1105 00c0 09        		.byte	9
 1106 00c1 09        		.byte	9
 1107 00c2 01        		.byte	1
 1108 00c3 3E        		.byte	62
 1109 00c4 41        		.byte	65
 1110 00c5 49        		.byte	73
 1111 00c6 49        		.byte	73
 1112 00c7 7A        		.byte	122
 1113 00c8 7F        		.byte	127
 1114 00c9 08        		.byte	8
 1115 00ca 08        		.byte	8
 1116 00cb 08        		.byte	8
 1117 00cc 7F        		.byte	127
 1118 00cd 00        		.byte	0
 1119 00ce 41        		.byte	65
 1120 00cf 7F        		.byte	127
 1121 00d0 41        		.byte	65
 1122 00d1 00        		.byte	0
 1123 00d2 20        		.byte	32
 1124 00d3 40        		.byte	64
 1125 00d4 41        		.byte	65
 1126 00d5 3F        		.byte	63
 1127 00d6 01        		.byte	1
 1128 00d7 7F        		.byte	127
 1129 00d8 08        		.byte	8
 1130 00d9 14        		.byte	20
 1131 00da 22        		.byte	34
 1132 00db 41        		.byte	65
 1133 00dc 7F        		.byte	127
 1134 00dd 40        		.byte	64
 1135 00de 40        		.byte	64
 1136 00df 40        		.byte	64
 1137 00e0 40        		.byte	64
 1138 00e1 7F        		.byte	127
 1139 00e2 02        		.byte	2
 1140 00e3 0C        		.byte	12
 1141 00e4 02        		.byte	2
 1142 00e5 7F        		.byte	127
 1143 00e6 7F        		.byte	127
 1144 00e7 04        		.byte	4
 1145 00e8 08        		.byte	8
 1146 00e9 10        		.byte	16
 1147 00ea 7F        		.byte	127
 1148 00eb 3E        		.byte	62
 1149 00ec 41        		.byte	65
 1150 00ed 41        		.byte	65
 1151 00ee 41        		.byte	65
 1152 00ef 3E        		.byte	62
 1153 00f0 7F        		.byte	127
 1154 00f1 09        		.byte	9
 1155 00f2 09        		.byte	9
 1156 00f3 09        		.byte	9
 1157 00f4 06        		.byte	6
 1158 00f5 3E        		.byte	62
 1159 00f6 41        		.byte	65
 1160 00f7 51        		.byte	81
 1161 00f8 21        		.byte	33
 1162 00f9 5E        		.byte	94
 1163 00fa 7F        		.byte	127
 1164 00fb 09        		.byte	9
 1165 00fc 19        		.byte	25
 1166 00fd 29        		.byte	41
 1167 00fe 46        		.byte	70
 1168 00ff 46        		.byte	70
 1169 0100 49        		.byte	73
 1170 0101 49        		.byte	73
 1171 0102 49        		.byte	73
 1172 0103 31        		.byte	49
 1173 0104 01        		.byte	1
 1174 0105 01        		.byte	1
 1175 0106 7F        		.byte	127
 1176 0107 01        		.byte	1
 1177 0108 01        		.byte	1
 1178 0109 3F        		.byte	63
 1179 010a 40        		.byte	64
 1180 010b 40        		.byte	64
 1181 010c 40        		.byte	64
 1182 010d 3F        		.byte	63
 1183 010e 1F        		.byte	31
 1184 010f 20        		.byte	32
 1185 0110 40        		.byte	64
 1186 0111 20        		.byte	32
 1187 0112 1F        		.byte	31
 1188 0113 3F        		.byte	63
 1189 0114 40        		.byte	64
 1190 0115 38        		.byte	56
 1191 0116 40        		.byte	64
 1192 0117 3F        		.byte	63
 1193 0118 63        		.byte	99
 1194 0119 14        		.byte	20
 1195 011a 08        		.byte	8
 1196 011b 14        		.byte	20
 1197 011c 63        		.byte	99
 1198 011d 07        		.byte	7
 1199 011e 08        		.byte	8
 1200 011f 70        		.byte	112
 1201 0120 08        		.byte	8
 1202 0121 07        		.byte	7
 1203 0122 61        		.byte	97
 1204 0123 51        		.byte	81
 1205 0124 49        		.byte	73
 1206 0125 45        		.byte	69
 1207 0126 43        		.byte	67
 1208 0127 00        		.byte	0
 1209 0128 7F        		.byte	127
 1210 0129 41        		.byte	65
 1211 012a 41        		.byte	65
 1212 012b 00        		.byte	0
 1213 012c 02        		.byte	2
 1214 012d 04        		.byte	4
 1215 012e 08        		.byte	8
 1216 012f 10        		.byte	16
 1217 0130 20        		.byte	32
 1218 0131 00        		.byte	0
 1219 0132 41        		.byte	65
 1220 0133 41        		.byte	65
 1221 0134 7F        		.byte	127
 1222 0135 00        		.byte	0
 1223 0136 04        		.byte	4
 1224 0137 02        		.byte	2
 1225 0138 01        		.byte	1
 1226 0139 02        		.byte	2
 1227 013a 04        		.byte	4
 1228 013b 40        		.byte	64
 1229 013c 40        		.byte	64
 1230 013d 40        		.byte	64
 1231 013e 40        		.byte	64
 1232 013f 40        		.byte	64
 1233 0140 00        		.byte	0
 1234 0141 01        		.byte	1
 1235 0142 02        		.byte	2
 1236 0143 04        		.byte	4
 1237 0144 00        		.byte	0
 1238 0145 20        		.byte	32
 1239 0146 54        		.byte	84
 1240 0147 54        		.byte	84
 1241 0148 54        		.byte	84
 1242 0149 78        		.byte	120
 1243 014a 7F        		.byte	127
 1244 014b 48        		.byte	72
 1245 014c 44        		.byte	68
 1246 014d 44        		.byte	68
 1247 014e 38        		.byte	56
 1248 014f 38        		.byte	56
 1249 0150 44        		.byte	68
 1250 0151 44        		.byte	68
 1251 0152 44        		.byte	68
 1252 0153 20        		.byte	32
 1253 0154 38        		.byte	56
 1254 0155 44        		.byte	68
 1255 0156 44        		.byte	68
 1256 0157 48        		.byte	72
 1257 0158 7F        		.byte	127
 1258 0159 38        		.byte	56
 1259 015a 54        		.byte	84
 1260 015b 54        		.byte	84
 1261 015c 54        		.byte	84
 1262 015d 18        		.byte	24
 1263 015e 08        		.byte	8
 1264 015f 7E        		.byte	126
 1265 0160 09        		.byte	9
 1266 0161 01        		.byte	1
 1267 0162 02        		.byte	2
 1268 0163 0C        		.byte	12
 1269 0164 52        		.byte	82
 1270 0165 52        		.byte	82
 1271 0166 52        		.byte	82
 1272 0167 3E        		.byte	62
 1273 0168 7F        		.byte	127
 1274 0169 08        		.byte	8
 1275 016a 04        		.byte	4
 1276 016b 04        		.byte	4
 1277 016c 78        		.byte	120
 1278 016d 00        		.byte	0
 1279 016e 44        		.byte	68
 1280 016f 7D        		.byte	125
 1281 0170 40        		.byte	64
 1282 0171 00        		.byte	0
 1283 0172 20        		.byte	32
 1284 0173 40        		.byte	64
 1285 0174 44        		.byte	68
 1286 0175 3D        		.byte	61
 1287 0176 00        		.byte	0
 1288 0177 7F        		.byte	127
 1289 0178 10        		.byte	16
 1290 0179 28        		.byte	40
 1291 017a 44        		.byte	68
 1292 017b 00        		.byte	0
 1293 017c 00        		.byte	0
 1294 017d 41        		.byte	65
 1295 017e 7F        		.byte	127
 1296 017f 40        		.byte	64
 1297 0180 00        		.byte	0
 1298 0181 7C        		.byte	124
 1299 0182 04        		.byte	4
 1300 0183 18        		.byte	24
 1301 0184 04        		.byte	4
 1302 0185 78        		.byte	120
 1303 0186 7C        		.byte	124
 1304 0187 08        		.byte	8
 1305 0188 04        		.byte	4
 1306 0189 04        		.byte	4
 1307 018a 78        		.byte	120
 1308 018b 38        		.byte	56
 1309 018c 44        		.byte	68
 1310 018d 44        		.byte	68
 1311 018e 44        		.byte	68
 1312 018f 38        		.byte	56
 1313 0190 7C        		.byte	124
 1314 0191 14        		.byte	20
 1315 0192 14        		.byte	20
 1316 0193 14        		.byte	20
 1317 0194 08        		.byte	8
 1318 0195 08        		.byte	8
 1319 0196 14        		.byte	20
 1320 0197 14        		.byte	20
 1321 0198 18        		.byte	24
 1322 0199 7C        		.byte	124
 1323 019a 7C        		.byte	124
 1324 019b 08        		.byte	8
 1325 019c 04        		.byte	4
 1326 019d 04        		.byte	4
 1327 019e 08        		.byte	8
 1328 019f 48        		.byte	72
 1329 01a0 54        		.byte	84
 1330 01a1 54        		.byte	84
 1331 01a2 54        		.byte	84
 1332 01a3 20        		.byte	32
 1333 01a4 04        		.byte	4
 1334 01a5 3F        		.byte	63
 1335 01a6 44        		.byte	68
 1336 01a7 40        		.byte	64
 1337 01a8 20        		.byte	32
 1338 01a9 3C        		.byte	60
 1339 01aa 40        		.byte	64
 1340 01ab 40        		.byte	64
 1341 01ac 20        		.byte	32
 1342 01ad 7C        		.byte	124
 1343 01ae 1C        		.byte	28
 1344 01af 20        		.byte	32
 1345 01b0 40        		.byte	64
 1346 01b1 20        		.byte	32
 1347 01b2 1C        		.byte	28
 1348 01b3 3C        		.byte	60
 1349 01b4 40        		.byte	64
 1350 01b5 30        		.byte	48
 1351 01b6 40        		.byte	64
 1352 01b7 3C        		.byte	60
 1353 01b8 44        		.byte	68
 1354 01b9 28        		.byte	40
 1355 01ba 10        		.byte	16
 1356 01bb 28        		.byte	40
 1357 01bc 44        		.byte	68
 1358 01bd 0C        		.byte	12
 1359 01be 50        		.byte	80
 1360 01bf 50        		.byte	80
 1361 01c0 50        		.byte	80
 1362 01c1 3C        		.byte	60
 1363 01c2 44        		.byte	68
 1364 01c3 64        		.byte	100
 1365 01c4 54        		.byte	84
 1366 01c5 4C        		.byte	76
 1367 01c6 44        		.byte	68
 1368 01c7 00        		.byte	0
 1369 01c8 08        		.byte	8
 1370 01c9 36        		.byte	54
 1371 01ca 41        		.byte	65
 1372 01cb 00        		.byte	0
 1373 01cc 00        		.byte	0
 1374 01cd 00        		.byte	0
 1375 01ce 7F        		.byte	127
 1376 01cf 00        		.byte	0
 1377 01d0 00        		.byte	0
 1378 01d1 00        		.byte	0
 1379 01d2 41        		.byte	65
 1380 01d3 36        		.byte	54
 1381 01d4 08        		.byte	8
 1382 01d5 00        		.byte	0
 1383 01d6 10        		.byte	16
 1384 01d7 08        		.byte	8
 1385 01d8 08        		.byte	8
 1386 01d9 10        		.byte	16
 1387 01da 08        		.byte	8
 1388 01db 78        		.byte	120
 1389 01dc 46        		.byte	70
 1390 01dd 41        		.byte	65
 1391 01de 46        		.byte	70
 1392 01df 78        		.byte	120
 1393               		.text
 1394               	.Letext0:
 1395               		.file 2 "/usr/avr/include/stdint.h"
 1396               		.file 3 "ascii_font.h"
 1397               		.file 4 "lcd.h"
 1398               		.file 5 "graphics.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 graphics.c
     /tmp/cc6OQGGX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc6OQGGX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc6OQGGX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc6OQGGX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc6OQGGX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc6OQGGX.s:13     .text.show_screen:0000000000000000 show_screen
                            *COM*:00000000000001f8 screen_buffer
     /tmp/cc6OQGGX.s:62     .text.clear_screen:0000000000000000 clear_screen
     /tmp/cc6OQGGX.s:92     .text.set_pixel:0000000000000000 set_pixel
     /tmp/cc6OQGGX.s:181    .text.draw_line:0000000000000000 draw_line
     /tmp/cc6OQGGX.s:665    .text.draw_char:0000000000000000 draw_char
     /tmp/cc6OQGGX.s:912    .progmem.data:0000000000000000 ASCII
     /tmp/cc6OQGGX.s:850    .text.draw_string:0000000000000000 draw_string

UNDEFINED SYMBOLS
lcd_position
lcd_write
__floatsisf
__divsf3
__gesf2
__addsf3
__gtsf2
__ltsf2
__subsf3
__do_clear_bss
